#+TITLE: mobileOrg-手机用的org神器
#+AUTHOR: DarkSun
#+EMAIL: lujun9972@gmail.com
#+OPTIONS: H3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* 什么是MobileOrg
emacs下的org-mode是一款时间管理很好的工具。然而美中不住的是，emacs只能在电脑上使用，而无法在手机上使用。现在这个年代，带着手机到处跑的人很多，带着电脑到处跑的人真的很难找。于是大神们（Richard Moreland和Matt Jones）顺应民意开发出了MobileOrg，意为手机上的Org。从此我们就可以在外出时使用手机进行时间管理，然后回到家将手机上的信息记录同步到电脑上。
* 准备工作
** DropBox
MobileOrg通过DropBox与电脑上的org进行同步,因此首先你必须在电脑端和手机端都安装一个DropBox,,我们这里假设你已经安装好了DropBox,有一个DropBox用户并设置同步目录为"E:/DropBox"
** MD5签名工具
MobileOrg使用MD5计算各个org的签名值,在与电脑Org进行同步时,MobileOrg只同步签名值改变的文件.linux下一般都自带了名为"md5"的签名程序.使用windows的同学可以在http://www.pc-tools.net/files/win32/freeware/md5sums-1.2.zip 下载MD5签名工具.我们假设已经下载了该工具并把它放在"D:\bin"目录中
** emacs配置
为了让MobileOrg与电脑端Org进行同步,还需要在电脑端对emacs进行一些必要的配置,这样电脑端的Org才知道需要同步哪些文件
+ org-mobile-directory
这个变量配置电脑端DropBox的同步目录的地址,需要同步的org文件会被emacs放到这个目录中,以便与MObileOrg进行同步
需要注意的是,这些Org如果包含中文的话,需要将文件的编码转换为UTF-8的格式,否则在MobileOrg上会显示为乱码
#+BEGIN_SRC elisp
    (setq org-mobile-directory "E:/Dropbox/org")
#+END_SRC
+ org-mobile-files
这个变量告诉电脑端Org需要与MobileOrg同步哪些Org,默认情况下它的值跟变量org-agenda-files的值一样的
#+BEGIN_SRC elisp
    (setq org-mobile-files (list "e:/我的GTD/office.org"
                     "e:/我的GTD/home.org"
                     ))
    
#+END_SRC
+ org-directory
这个变量告诉电脑端Org,若org-mobile-files中配置的是相对路径,则表示的是相对于org-directory所代表的目录来说的
#+BEGIN_SRC elisp
    (setq org-directory "E:/我的GTD")
#+END_SRC
+ org-mobile-inbox-for-pull
当要把MobileOrg所做的修改同步到电脑端Org时,电脑端Org会先把MobileOrg的修改动作记录到该变量指定的文件中,然后再根据该文件中所记录的操作对电脑端Org进行修改
#+BEGIN_SRC elisp
    (setq org-mobile-inbox-for-pull "E:/我的GTD/inbox.org")
#+END_SRC
+ org-mobile-checksum-binary
上面提到了MobileOrg只会同步签名值改变了的文件,这个变量配置了计算签名值的程序所在的地址(可以同时配置多个地址),电脑端Org会使用第一个可用的程序计算签名
#+BEGIN_SRC elisp
  ;; (defcustom org-mobile-checksum-binary (or (executable-find "d:/bin/md5sums.exe"))
  ;;  "Executable used for computing checksums of agenda files."
  ;;  :group 'org-mobile
  ;;  :type 'string)
#+END_SRC
** MobieOrg的安装与配置
+ MobileOrg在android的"play商场"和IOS的appstore都可以免费找到,按照一般的程序安装即可.
+ 安装完后第一次打开MobileOrg,会让你选择同步的方式,我这里选择通过DropBox同步,
+ 然后选择需要同步的Org文件放在哪个目录下,这里我们的目录是"org"(与org-mobile-directory配置的目录对应)
+ 其他详细设置可用在Settings中继续设置
* 开始使用
** 第一步,将电脑端的Org同步到MobileOrg中去
+ 电脑端Org的同步方式不是单纯的将Org拷贝到前面配置的DropBox就可以了,事实上它需要作很多其他的动作,比如计算签名信息,生成一些必须的文件等等.
+ 我们可用通过emacs的Org菜单有一个MobileOrg的子菜单,选择"Push files and views"功能,电脑端Org会自动将org-mobile-files定义的Org文件进行一些处理后,拷贝到org-mobile-directory定义的同步目录中去.
+ 在手机上点击MobileOrg的Synchronize图标,MobileOrg开始同步电脑端的Org文件,同步完后MobileOrg就会显示出同步的Org文件的内容,同时会生成一个Agenda
** 第二步,然后就可用用在手机上用MobileOrg进行时间管理操作了.
+ 在MobileOrg的右上角可用按出菜单项,对Org进行各种操作.
+ 长按各个记录条目可用对记录进行修改操作
** 第三步,将MobileOrg的操作同步到电脑端Org中去
在emacs的Org菜单的MobileOrg子菜单项中,点击"Get Captured and Flagged",emacs就会根据MobileOrg的操作记录同步修改电脑端的Org文件
* BUGS
MobileOrg中其实有一个BUG，就是不能在手机端连续修改同一个entry两次，因为MobileOrg手机端会记录下每次修改手机端上的旧内容和新内容，并且在 =org-mobile-pull= 的时候对比记录的旧内容是否与电脑上当前的内容相同。

然而...MobileOrg手机端在未与电脑端(org-mobile-push后再同步)同步前是不会更改真正的内容的！

也就是说，假设对一个entry的内容更改过程是 =A->B->C=,那么本来我们想象应该是记录成这样的:
#+BEGIN_EXAMPLE
  ,* entry
  ,** old
  A
  ,** new
  B

  ,* entry
  ,** old
  B
  ,** new
  C
#+END_EXAMPLE

但实际上记录的是
#+BEGIN_EXAMPLE
  ,* entry
  ,** old
  A
  ,** new
  B

  ,* entry
  ,** old
  A
  ,** new
  C
#+END_EXAMPLE

因此只能应用 =A->B= 的变更，而无法应用 =B->C= 的变更。

一个解决方案是修改 =org-mobile-force-mobile-change= 来强制应用新值,这对非 =body= 类的操作还是比较适合的
#+BEGIN_SRC emacs-lisp
  (setq org-mobile-force-mobile-change '(todo todostate tags priority heading addheading))
#+END_SRC

但是对于 =body= 类的修改来说是不太适合的，因为mobileorg的 =clock-in=, =clock-out= 操作会修改 =body= 的内容，而这部分内容修改起来很麻烦

一个更完善的解决方案可能是自定义新的 =org-mobile-edit= 函数，然后设置到 =org-mobile-action-alist= 变量中.
在这个函数中，对于 =body= 类修改使用 (patch (diff old new)) 的方法可能更适合。

#+BEGIN_SRC emacs-lisp
  (defun org-mobile-edit (what old new)
    "Edit item WHAT in the current entry by replacing OLD with NEW.
  WHAT can be \"heading\", \"todo\", \"tags\", \"priority\", or \"body\".
  The edit only takes place if the current value is equal (except for
  white space) the OLD.  If this is so, OLD will be replace by NEW
  and the command will return t.  If something goes wrong, a string will
  be returned that indicates what went wrong."
    (let (current old1 new1 level)
      (if (stringp what) (setq what (intern what)))

      (cond

       ((memq what '(todo todostate))
        (setq current (org-get-todo-state))
        (cond
         ((equal new "DONEARCHIVE")
          (org-todo 'done)
          (org-archive-subtree-default))
         ((equal new current) t)		; nothing needs to be done
         ((or (equal current old)
              (eq org-mobile-force-mobile-change t)
              (memq 'todo org-mobile-force-mobile-change))
          (org-todo (or new 'none)) t)
         (t (error "State before change was expected as \"%s\", but is \"%s\""
                   old current))))

       ((eq what 'tags)
        (setq current (org-get-tags)
              new1 (and new (org-split-string new ":+"))
              old1 (and old (org-split-string old ":+")))
        (cond
         ((org-mobile-tags-same-p current new1) t) ; no change needed
         ((or (org-mobile-tags-same-p current old1)
              (eq org-mobile-force-mobile-change t)
              (memq 'tags org-mobile-force-mobile-change))
          (org-set-tags-to new1) t)
         (t (error "Tags before change were expected as \"%s\", but are \"%s\""
                   (or old "") (or current "")))))

       ((eq what 'priority)
        (let ((case-fold-search nil))
          (when (looking-at org-complex-heading-regexp)
            (let ((current (and (match-end 3) (substring (match-string 3) 2 3))))
              (cond
               ((equal current new) t)	;no action required
               ((or (equal current old)
                    (eq org-mobile-force-mobile-change t)
                    (memq 'tags org-mobile-force-mobile-change))
                (org-priority (and new (string-to-char new))))
               (t (error "Priority was expected to be %s, but is %s"
                         old current)))))))

       ((eq what 'heading)
        (let ((case-fold-search nil))
          (when (looking-at org-complex-heading-regexp)
            (let ((current (match-string 4)))
              (cond
               ((equal current new) t)	;no action required
               ((or (equal current old)
                    (eq org-mobile-force-mobile-change t)
                    (memq 'heading org-mobile-force-mobile-change))
                (goto-char (match-beginning 4))
                (insert new)
                (delete-region (point) (+ (point) (length current)))
                (org-set-tags nil 'align))
               (t (error "Heading changed in MobileOrg and on the computer")))))))

       ((eq what 'addheading)
        (if (org-at-heading-p)	; if false we are in top-level of file
            (progn
              ;; Workaround a `org-insert-heading-respect-content' bug
              ;; which prevents correct insertion when point is invisible
              (org-show-subtree)
              (end-of-line 1)
              (org-insert-heading-respect-content t)
              (org-demote))
          (beginning-of-line)
          (insert "* "))
        (insert new))

       ((eq what 'refile)
        (org-copy-subtree)
        (org-with-point-at (org-mobile-locate-entry new)
          (if (org-at-heading-p)	; if false we are in top-level of file
              (progn
                (setq level (org-get-valid-level (funcall outline-level) 1))
                (org-end-of-subtree t t)
                (org-paste-subtree level))
            (org-paste-subtree 1)))
        (org-cut-subtree))

       ((eq what 'delete)
        (org-cut-subtree))

       ((eq what 'archive)
        (org-archive-subtree))

       ((eq what 'archive-sibling)
        (org-archive-to-archive-sibling))

       ((eq what 'body)
        (setq current (buffer-substring (min (1+ (point-at-eol)) (point-max))
                                        (save-excursion (outline-next-heading)
                                                        (point))))
        (if (not (string-match "\\S-" current)) (setq current nil))
        (cond
         ((org-mobile-bodies-same-p current new) t) ; no action necessary
         ((or (org-mobile-bodies-same-p current old)
              (eq org-mobile-force-mobile-change t)
              (memq 'body org-mobile-force-mobile-change))
          (save-excursion
            (end-of-line 1)
            (insert "\n" new)
            (or (bolp) (insert "\n"))
            (delete-region (point) (progn (org-back-to-heading t)
                                          (outline-next-heading)
                                          (point))))
          t)
         ((or (memq 'bodymerge org-mobile-force-mobile-change))
          (save-excursion
            (let ((fileA (make-temp-file "org-mobile" nil "A" old))
                  (fileB (make-temp-file "org-mobile" nil "B" new))
                  (fileC (make-temp-file "org-mobile" nil "C" current)))
              (shell-command (format "patch -f %s <(diff %s %s)" fileC fileA fileB))
              (setq current (with-temp-buffer
                              (insert-file-contents fileC)
                              (buffer-string))))
            ;; (diff-buffer-with-file )
            (end-of-line 1)
            (insert "\n" new)
            (or (bolp) (insert "\n"))
            (delete-region (point) (progn (org-back-to-heading t)
                                          (outline-next-heading)
                                          (point))))
          t)
         (t (error "Body was changed in MobileOrg and on the computer")))))))
#+END_SRC
