#+INTERLEAVE_PDF: ../../Downloads/性能之巅 洞悉系统、企业与云计算.pdf
#+TITLE: 性能之巅
#+AUTHOR: lujun9972
#+TAGS: linux
#+DATE: [2019-01-03 四 09:20]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
* 操作系统
** 用户栈和内核栈
:PROPERTIES:
:interleave_page_note: 125
:END:
在执行系统调用是，一个进程的线程有两个栈：一个用户级别的栈和一个内核级别的栈。

当线程被阻塞时，用户级别的栈在系统调用期间并不会被改变，因为在内核上下文中执行时，线程用的是一个单独的内核级别的栈。
* 观测工具
** 性能观测工具的分类
:PROPERTIES:
:interleave_page_note: 147
:END:

根据工具是 =系统级别/进程级别= 和 =基于计数/基于跟踪= 这两个维度可以将性能观测工具分成4类:

[[file:./images/screenshot-02.png]]

*** 计数器
内核维护了各种统计数据用于对事件计数，通常计数器实现为无符号的整型，当发生事件时递增。

计数器的使用可以认为是零开销，因为它就在那里，始终由内核维护，唯一的使用开销是从用户空间读取它而已。

系统级别的计数器工具包括:

+ vmstat :: 虚拟内存和物理内存的统计
+ mpstat :: 每个CPU的使用情况
+ iostat :: 每个磁盘IO的使用情况，由块设备接口报告
+ netstat :: 网络接口的统计，TCP/IP栈的统计，以及每个连接的一些统计信息
+ sar :: 各种各样的统计，能归档历史数据

         
进程级别的计数器工具包括:

+ ps :: 查看进程各种统计信息，包括内存和CPU的使用
+ top :: 按一个统计数据排序
+ pmap :: 将进程的内存段和使用统计一起列出

*** 跟踪
跟踪收集每一个事件的数据以供分析。跟踪捕获数据会有CPU开销，还需要不小的存储空间来存放数据，因此可能会拖慢被跟踪的对象。

日志可以被认为是一种默认开启的低频率跟踪。

系统级别的跟踪工具包括:

+ tcpdump :: 网络包跟踪（libpcap库)
+ snoop :: 网络包跟踪工具
+ blktrace :: 块IO跟踪
+ iosnoop :: 基于DTrace的块IO跟踪工具
+ execsnoop :: 基于Dtrace的新进程跟踪工具
+ dtruss :: 基于Dtrace的系统调用缓冲跟踪工具
+ DTrace :: 跟踪内核的内部活动和所有资源的使用情况，支持静态和动态的跟踪
+ SystemTap :: 跟踪内核的内部活动和所有资源的使用情况，支持静态和动态的跟踪
+ perf :: Linux性能事件、静态和动态跟踪的探针

进程级别的跟踪工具包括:

+ strace :: 跟踪Linux系统调用
+ truss :: 跟踪系统调用
+ gdb :: 源码级别的调试器
+ mdb :: 一个具有可扩展性的调试器
** 计数器

