#+TITLE:Git教程笔记
#+AUTHOR: DarkSun
#+EMAIL: lujun9972@gmail.com
#+OPTIONS: H3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
* Git基础说明
** Git与subversion的区别
   * Git只关注文件数据的整体内容是否发生改变,而不关心文件内容的具体差异
   * Git是分布式的版本控制系统,因此大多数的操作不需要网络环境
   * 所有保存在Git数据库中的东西都是通过对内容的SHA-1计算的hash值作为索引而不是靠文件名
   * 当把本地工作推送到服务器上时,Git必须服务器上的更新合并到本地后才能推送,而Subversion会在服务器端自动合并提交的更新
** Git文件状态变化表
   对于任何文件,在Git内部只有三种状态:已提交(表示已经保存在本地数据库中),已修改(修改了某个文件)和已暂存(把已修改的文件放在下次提交时要保存的清单中)
   
   #+CAPTION: Git文件状态变化表
   | 初始状态 | 操作       | 目标状态 |
   |----------+------------+----------|
   | 未跟踪   | git add    | 未修改   |
   | 未修改   | 编辑文件   | 已修改   |
   | 已修改   | git add    | 已暂存   |
   | 已暂存   | git commit | 未修改   |
   | 未修改   | git rm     | 未跟踪      |
* Git获取帮助
  * git help <verb>
  * git <verb> --help
  * man git-<verb>
* Git的配置
** git配置存放点
   git配置有三个级别的配置存放点,每个级别的配置会覆盖上层的相同配置
   * /etc/gitconfig

     其中的配置对整个系统起作用,通过git config --system来设定

   * ~/.gitconfig

     用户目录下的配置文件只适用于该用户,使用git config --global来设定

   * work-dirctory/.git/config文件

     这里的配置仅针对当前项目有效,使用git config来设定
** 删除设置
可以使用--unset选项来移除设置
#+BEGIN_SRC sh
  git config --unset --global ${配置项}
#+END_SRC
** 常用的git配置项
*** 用户名称和email
这两条配置很重要,git提交时都会引用这两条信息,说明是谁提交了更新.
#+BEGIN_SRC sh
  git config --global user.name "darksun"
  git config --global user.email "lujun9972@gmail.com"
#+END_SRC
*** 默认文本编辑器
    当git需要你输入一些额外消息时,会自动调用一个默认外部文件编辑器.默认为操作系统指定的默认编辑器
    #+BEGIN_SRC sh
      git config --global core.editor emacs    
    #+END_SRC
*** 差异分析工具
    Git可用理解kdiff3,tkdiff,meld,xxdiff,vimdiffgvimdiff,ecmerge和opendiff等合并工具的输出信息
    #+BEGIN_SRC sh
      git config --global merge.tool vimdiff    
    #+END_SRC
*** 提高命令输出的可读性
将color.ui设置为auto,可以让命令的输出拥有更高的可读性
#+BEGIN_SRC sh
  git config --global collor.ui auto
#+END_SRC
*** 查看配置信息
    #+BEGIN_SRC sh
      # 查看所有的配置项
      git config --list               # 有时候会看到重复的变量名,说明它们来自不同的配置文件
      # 直接查看某个变量的设定,只要把特定名称跟在后面即可.
      git config user.name
    #+END_SRC
*** 定义git命令的别名
    #+BEGIN_SRC sh
      # 设置别名
      git config --global alias.co checkout # 设置git co为git checkout的别名
      git config --global alias.visual "!gitk" # 设置git visual为执行命令gitk
    #+END_SRC
*** 配置git commit 模板
首先创建一个文本文件，内容为git comit的模板,我们假设它的路径为"~/.gitmessage"
#+begin_src conf :tangle "~/.gitmessage"
  # type: commit 的类型包括:
  # feat: 新特性
  # fix: 修改问题
  # refactor: 代码重构
  # docs: 文档修改
  # style: 代码格式修改, 注意不是 css 修改
  # test: 测试用例修改
  # chore: 其他修改, 比如构建流程, 依赖管理.

  # scope: commit 影响的范围, 比如: route, component, utils, build...

  <type>(<scope>):One liner describing the change(<=50 chars)

  PROBLEM: Description of the problem goes here

  SOLUTION: Description of the solution goes here

  TESTS:
  Explain the how you tested the change. If possible also provide links
  where your working solution is hosted so that reviewer can test it.
  How you tested this change.
#+end_src

设置 commit.template 属性执行该模板文件
#+begin_src shell
  git config --global commit.template "~/.gitmessage"
#+end_src

除了设置 commit.template 属性外，也可以使用 git commit 的 =-f= 属性选定模板文件
#+begin_src shell
  git commit -a -f ${path_of_gitmessage}
#+end_src
* Git的使用
** Git的一般用法
      #+BEGIN_SRC sh
        ###############初始化操作##############
        # 1. 初始化当前目录,为git版本控制作准备
        git init
        git clone ${仓库url}              # 1. 克隆已有的仓库到本地
        git clone ${仓库url} ${本地目录}  # 1. 克隆已有的仓库到本地
        git clone //${计算机名}/${远程git仓库路径} ${本地目录} # 远程仓库以共享文件夹的方式进行共享
        git clone ${账号}@${远程服务器}:${远程git仓库路径} ${本地目录} # 远程仓库在ssh服务器上

        ###############版本控制##############
        # 2. 检查当前文件的状态
        git status

        # [编辑忽略文件清单]
        # 在名为.gitignore的文件中列出要忽略的文件模式

        # 3. 跟踪新文件,此时文件加入跟踪列表,但状态为未修改
        git add $要跟踪的文件路径       # 若文件路径为目录,则递归跟踪目录下的所有文件.

        # 4. 修改已跟踪文件
        # 删除已跟踪文件
        git rm
        # 移动已跟踪文件
        git mv $from_file $to_file      # 相当于mv $from_file $to_file;git rm $from_file;git add $to_file

        # 5. 将已修改的文件放入暂存区
        git add $要暂存的文件路径       # git add命令会根据目标文件的状态不同而产生不同的效果
        # [查看暂存后那些文件进行了改变]
        git diff                        # 比较的是当前文件和暂存区域快照之间的差异

        # 6. 提交暂存区的快照
        git commit                      # 使用-a选项可用跳过暂存这一步,自动把已经跟踪的文件暂存起来并提交
        # [查看已经暂存起来的文件和上次提交时的快照之间的差异]
        git diff --cached

        # 7. 修改最后一次提交的说明
        git commit --amend              # 使用当前的暂存快照来替代最后一次提交
        # 7. 取消最后一次暂存/取消对文件的修改
        # 使用git status会提示怎么做
        git rm --cached ${文件名}       # 将一个文件由已暂存转化为未暂存

      #+END_SRC
** git commit中注释的格式规范一般为
+ 第一行 :: 用一行文字简述提交的更改内容
+ 第二行 :: 空行
+ 第三行 :: 记述更改的原因和详细内容
+ @用户名 :: 通知某用户
+ @组织 :: 通知某组织中的所有成员
+ @组织/团队 :: 通知某团队的所有成员
+ #编号 :: 连接到本仓库对应的issue编号
+ 用户名/仓库 #编号 :: 连接到指定仓库对应的issue编号
** 远程仓库命令   
同他人协作开发某个项目时,需要管理远程仓库,以便推送/拉取数据,分享各自的工作进展. 
#+BEGIN_SRC sh
  ###############远程仓库操作##############
  # 查看当前的远程仓库
  git remote                      # 列出每个远程仓库的别名
  git remote -v                   # 列出每个远程仓库的别名和对应的URL

  # 添加远程仓库
  git remote add $远程仓库别名 $远程仓库url

  # 让Git自动对比本地Git仓库与远程Git仓库的分支名称，找出对应的分支，并在本地Git仓库中创建追踪分支
  git remote update

  # 从远程仓库更新本地数据
  git fetch $remote_name          # 从远程仓库拉取所有本地仓库没有的数据,但不会自动合并本地仓库的数据
  git pull                        # 默认将远程仓库origin的master分支合并到当前的master分支
  # 推送数据到远程仓库
  git push                        # 默认将本地master分支推送到远程仓库的origin的master分支
  git push $remote_name $branch_name # 将本地的分支$branch_name推送到远程仓库$remote_name中
  git push -u $remote_name $branch_name # 在推送时,将$remote_name上的$branch_name分支设为本地仓库当前分支的默认upstream.

  # 重命名远程仓库别名
  git remote rename $old_alias $new_alias

  # 删除远程仓库别名
  git remote rm $远程仓库别名

  # 删除陈旧的远程分支
  git remote prune ${远程仓库}

  # 查看远程仓库信息
  git remote show $remote_name

  # 更改远程仓库的URL
  git remote set-url ${远程仓库} ${新URL}
#+END_SRC
** tag命令
   git中的标签有两种:轻量级的标签和带附注的标签
   #+BEGIN_SRC sh
     ###############标签操作##############
     # 添加轻量级标签
     git tag $标签名
     
     # 添加带附注的标签
     git tag -a $标签名
     git tag -a $标签名 -m $标签说明
     git tag -s $标签名 -m $标签说明 # 使用GPG来签署标签
     git tag -a $标签名 $早前某次提交的检验和(或者前几位字符) # 为早前的某次提交作tag
     
     # 查看标签信息
     git show $标签名
     
     # 验证标签
     git tag -v $标签名              # 调用GPG来验证签名,需要有签署者的公钥,存放在keyring中
     
     # 推送tag
     git push $remote_name $tag名称  # 推送标签到远程仓库
     git push $remote_name --tags    # 一次推送所有的标签
   #+END_SRC
** log命令
   1. git log选项
      | 选项             | 说明                                                                                 |
      |------------------+--------------------------------------------------------------------------------------|
      | -p               | 按patch格式显示每个更新之间的更新                                                    |
      | --stat           | 显示更新的统计信息                                                                   |
      | --shortstat      | 只显示--stat中最后的行数修改添加移除统计                                             |
      | --name-only      | 仅在提交信息后显示已修改的文件清单                                                   |
      | --name-status    | 显示新增,修改,删除的文件清单                                                         |
      | --abbrecv-commit | 近显示SHA-1的前几个字符,而非所有的40个字符                                           |
      | --relative-date  | 使用相对时间显示                                                                     |
      | --pretty=...     | 使用其他格式显示历史提交信息,可用选项包括oneline,short,full,fuller,format:格式标示符 |
      | --pretty=short   | 只显示提交信息的第一行,一般为概要介绍                                                                  |
      | -n(n为数字)      | 仅显示最后提交的n条记录                                                              |
      | --since/--after  | 仅显示指定日期之后的修改                                                             |
      | --until/--before | 仅显示指定日期之前的提交                                                             |
      | --author         | 仅显示指定作者相关的提交                                                             |
      | --committer      | 仅显示指定提交者相关的提交                                                           |
   2. git log --pretty=format:格式说明符
      | 选项 | 说明                     |
      |------+--------------------------|
      | %H   | 提交对象的完整hash字符串 |
      | %h   | 提交对象的简短hash字符串 |
      | %T   | 树对象的完整hash字符串   |
      | %t   | 树对象的简短hash字符串   |
      | %P   | 父对象的完整hash字符串   |
      | %p   | 父对象的简短hash字符串   |
      | %an  | 作者名字                 |
      | $ae  | 作者的email              |
      | %ad  | 作者修订的绝对日期       |
      | %ar  | 作者修订的相对日期       |
      | %cn  | 提交者名字               |
      | %ce  | 提交者的email            |
      | %cd  | 提交的绝对日期           |
      | %cr  | 提交的相对日期           |
      | %s   | 提交说明                     |
   3. --follow选项会让Git在日志中回溯并找到内容相关的整个历史记录
      #+BEGIN_SRC sh
        git log --follow ${文件}
      #+END_SRC
   4. -Sstring根据给定的string搜索涉及string改变的那些提交
      #+BEGIN_SRC sh
        git log -S${字符串} --pretty=online --abbrev-commit ${文件} # 搜索文件中涉及指定字符串的修改记录  
      #+END_SRC

** reflog命令
git log只能查看以当前状态为终点的历史日志. 而使用git reflog命令可以查看所有当前仓库的操作日志.
** diff命令
+ 查看工作树和暂存树的差别
  #+BEGIN_SRC sh
    git diff  
  #+END_SRC

+ 查看工作树和给定提交的差别
  #+BEGIN_SRC sh
    git diff ${提交}
  #+END_SRC

+ 显示索引与提交的差别
  #+BEGIN_SRC sh
    git diff --cached ${提交}
  #+END_SRC

+ 比较指定两个版本之间的差异
  #+BEGIN_SRC sh
    git diff ${提交1} ${提交2}
  #+END_SRC

+ 路径限定的git diff
  git diff 操作模式会基于从给定树的根对象开始比较整个目录结构，但是你也可以限定之比较指定路径
  #+BEGIN_SRC sh
    git diff ${目录/文件}
  #+END_SRC
** 分支命令
远程分支的格式一般为"远程仓库名/分支名"
   #+BEGIN_SRC sh
     # 新建分支
     git branch $分支名              # 但并未切换到该分支
     git branch ${分支名} ${commit节点标识符或标签}

     # 切换分支
     git checkout $分支名            
     git checkout -b $分支名         # 新建并切换到分支处
     git checkout -                  # 切换至上一个分支

     # 跟踪分支:一种跟远程分支有直接联系的本地分支,在跟踪分支中输入git push 和git pull会自动推断相关的远程分支
     git checkout -b $分支名 $远程仓库名/$远程分支名 # 新建指定分支,并绑定为指定远程分支的跟踪分支
     git checkout --track $远程仓库名/$远程分支名    # 新建指定远程分支的跟踪分支

     # 合并分支
     git merge $分支名               # 将分支名的分支合并到当前分支处
     git merge --no-ff $分支名       # 合并分支,并在历史记录中记录下本次分支合并

     # 删除分支
     git branch -d $分支名           # 若指定分支包含当前分支未合并的工作,则删除会失败
     git branch -D $分支名           # 强制删除分支

     # 删除远程Git仓库中的分支
     git push ${远程Git仓库名称} --delete 分支名

     # 重命名分支
     git branch -m ${新分支名}

     # 冲突的合并
     git status                      # unmerged处显示哪几个文件有冲突
     git mergetool                   # 使用自定义的图形化工具合并文件,当然也可以用vi来手工合并
     git add $合并后的文件           # 将合并后的文件标记为冲突已解决
     git merge --abort               # 放弃合并

     # 显示本地分支
     git branch                      # 显示当前所有分支的清单
     git branch --merge              # 查看那些分支已经合并入当前分支,这些分支可用被del了
     git branch --no-merged          # 查看尚未合并的分支

     # 显示远程分支
     git branch -r

     # 显示所有分支（包括本地分支和远程分支）
     git branch -a

     # 推送分支
     git push $远程仓库名 $本地分支名 # 推送指定本地分支到远程仓库中
     git push $远程仓库名 $本地分支名:$远程分支名 # 推送指定的本地分支到远程仓库中,并命名为指定的远程分支名

     # 删除远程分支
     git push $远程仓库名 :$远程分支名 # 可用理解为将本地的空白分支推送到远程仓库覆盖远程分支

     # 回到历史版本
     git reset $hash                 # 保持当前修改
     git reset --hard $hash          # 不保留当前修改

     # 衍合,所谓衍合就是把一个分支里提交的改变在另一个分支里重放一遍
     git rebase $分支                # 把指定分支的改变在当前分支重作一边形成新的版本
     git rebase $主分支 $特征分支    # 把特征分支的改变在主分支中重做一边形成新的版本
     git rebase master server client # 找出client分支从它与server分支的祖先相分离之后的改变在master分支上重新做一遍.
     # 注意!!永远不要衍合那些已经推送到公共仓库的更新!!
   #+END_SRC
** 查看提交

+ 查看特定提交的详细信息
  #+BEGIN_SRC sh
  git show ${提交码}
  #+END_SRC

+ 若没有显式制定提交码，她将只显示最后一次提交的详细信息
  #+BEGIN_SRC sh
    git show
  #+END_SRC

+ 显示指定文件的提交
  #+BEGIN_SRC sh
    git show ${文件}
  #+END_SRC

+ 显示指定分支下某文件的提交
  #+BEGIN_SRC sh
    git show ${分支}:${文件}
  #+END_SRC

+ 查看当前开发分支的简洁单行摘要
  #+BEGIN_SRC sh
    git show-branch --more=10
  #+END_SRC

+ 查看blob对象的内容
  #+BEGIN_SRC sh
    git cat-file -p ${blob_hash}
  #+END_SRC

+ 列出Git文档库中的文件列表
  #+BEGIN_SRC sh
    git ls-files
  #+END_SRC

+ 查看对象模型下，暂存文件的SHA1值
  #+BEGIN_SRC sh
    git ls-files --stage
  #+END_SRC

** git reset命令
+ git --soft

  --soft会将HEAD引用指向给定提交。索引和工作目录的内容保持不变。

+ git --mixed

  --mixed会将HEAD指向给定提交。同时索引内容也跟着改变以符合给定提交的树结构，但工作目录不会改变。

  这是git reset的默认模式

+ git --hard

  将HEAD引用指向给定提交。 索引内容也跟改变以符合给定提交的树结构。 此外工作目录也恢复到提交表示i的树的状态。

** git stash命令

当你开发到一半要停下手头的工作去优先完成新的任务时，可以使用stash。

stash可以捕获你的工作进度，允许你保存工作进度并且当你方便时再回到该进度

1. 存档
   #+BEGIN_SRC sh
     git stash save                  # Git会提供一个默认的日志消息
     git stash save "${MSG}"         # 也可以提供自己的日志信息
   #+END_SRC

2. 取档
   #+BEGIN_SRC sh
     git stash pop
   #+END_SRC

3. 查询stash的内容
   #+BEGIN_SRC sh
     git show-branch stash
   #+END_SRC

4. 可以在stash的情况下，再次stash！
** 生成/应用补丁
+ git format-patch会生成email形式的补丁
  #+BEGIN_SRC sh
    git format-patch -${N}             # 为最近N次提交生成补丁，默认每个提交一个补丁
    git format-patch ${start}..${end}     # 为一个commit范围生成补丁
    git format-patch ${commit}            # 相当于git format-patch ${commit}..HEAD
    git format-patch -o ${目录} ${commit} # -o选项指定补丁存放的目录
    # 如果想要为所有提交生成补丁，且包括初始的根提交，可以使用--root选项
    git format-patch --root ${end} --commit
  #+END_SRC
  注意：合并本身是不会生成补丁的
+ git send-mail会通过SMTP来发送一个Git补丁
  #+BEGIN_SRC sh
    git send-email -to ${email_address} ${patch_files} # 发送patch_files到email_address
    # 你可能还需要设置sendmail.smtpserver和sendmail.smtpserverport 配置项
  #+END_SRC
+ git am会应用邮件消息中的补丁
  #+BEGIN_SRC sh
    git am ${patch_files}
    # -3/-3way 选项表示使用三路合并的方式：一个文件的当前版本，一个文件的替代版本，一个定位补丁应用到的文件的原始基础版本
    git am -3 ${patch_files}
  #+END_SRC
** .gitignore文件格式
+ 空行会被忽略，以#开头的行可以作为注释。 然而 *如果#跟在其他文本后面就不是注释了*
+ 简单的字面文件名匹配 *任何目录* 中的同名文件
+ 目录名由/标记，则能匹配同名的目录和子目录，但不匹配文件或符号链接
+ 可以使用shell通配符，但不能跨目录匹配
+ 起始的!会对该行剩余部分的模式进行取反（即匹配的文件不被忽略），切取反模式的优先级高于普通规则
** 相对提交名
+ ~N 表示相对提交名的第N个提交
  #+BEGIN_SRC sh
    master~3                        # master的上三个提交
  #+END_SRC
+ ^ 表示相对提交名的上一个提交
  #+BEGIN_SRC sh
    master^                         # master的上一个提交
    master^^                        # master的上两个提交
  #+END_SRC
+ ^N 表示第N个父提交

  当一个提交是merge来的，则可能包含N个父提交
  #+BEGIN_SRC sh
    C^1                             # 表示地一个父提交
    C^2                             # 表示地二个父提交
  #+END_SRC
+ since..until 表示(since,until] 这么一个提交的区间

  即那些包含在until中的提交，但却不在since中的提交。
  #+BEGIN_SRC sh
    git log --pretty=short --abbrev-commit master~12..master~10
  #+END_SRC
+ start...end 表示start或end可达，但是又不是start和end同时可达的提交集合
** 其他git工具
*** git bisect
git bisect用二分法帮你找出引入BUG的那个提交。

你需要在一个 *干净* 的工作目录中启动git bisect. 此过程中会调整你的工作目录来包含版本库的不同版本，并询问你该版本的代码是否正常

1. 启动二分搜索
   #+BEGIN_SRC sh
     git bitsect start
   #+END_SRC
2. 告诉当前分支是好的还是坏的
   #+BEGIN_SRC sh
     git bisect good                 # 当前分支是正常的
     git bisect goog ${分支}            # 指定分钟是好的
     git bisect bad                  # 当前分钟是有错的
   #+END_SRC
3. 查看搜索日志
   #+BEGIN_SRC sh
     git bisect log
   #+END_SRC

4. 可视化地检查提交范围内的内容
   #+BEGIN_SRC sh
     git bisect visualize --pretty=online
   #+END_SRC
     
5. 结束二分搜索
   #+BEGIN_SRC sh
     git bisect reset
   #+END_SRC

*** git grep
grep搜索commit节点中所有文件，然后列出包含该字符串的每一行
#+BEGIN_SRC sh
  git grep ${要查找的字符串} ${commit节点}
#+END_SRC

如果要查找的字符串不止一个，可以使用-e选项来分别指定这些字符串
#+BEGIN_SRC sh
  git grep -e ${要查找的字符串1} -e ${要查找的字符串2} ${commit节点}
#+END_SRC

这些字符串默认用or的方式结合，如果要限制所有字符都必须出现才算数，可以用 --and 选项把它们结合起来
#+BEGIN_SRC sh
  git grep -e ${要查找的字符串1} --and -e ${要查找的字符串2} ${commit节点}
#+END_SRC

and 和 or 的结合还可以混用，甚至加上括号
#+BEGIN_SRC sh
  git grep -e ${要查找的字符串1} --and \( -e ${要查找的字符串2} -e ${要查找的字符串3} \) ${commit节点}
#+END_SRC

*** git blame
git blame可以告诉你一个文件中的没一行最后是谁修改的，和哪次提交作出了变更
#+BEGIN_SRC sh
  git blame -L ${开始行},${结束行} ${文件}
#+END_SRC
*** git cherry-pick

git cherry-pick提交命令会在当前分支上应用给定提交引入的改变

+ 引入给定的提交引入的变更
  #+BEGIN_SRC sh
    git cherry-pick ${某次提交}
  #+END_SRC

+ 引入某个范围的提交
  #+BEGIN_SRC sh
    git cherry-pick start..end
  #+END_SRC

*** git revert

  git revert语法与git cherry-pick类似，但是引入的是指定提交的逆改变。

*** git gc
=git gc= 会清理Git文档库中无用的数据。 它常与以下选项搭配

+ --aggressive :: Git默认情况下会用比较快速的方式检查文档库并完成清理。但这个选项会使Git用仔细的方式检查并清理
+ --auto :: Git会先判断文档库是否有必要清理，如果情况还算良好就不会执行清理操作
+ --no-prune :: 要求Git不真正清除无用的数据，只要整理它们即可

* FAQ
** 如何把GIT仓库的子目录独立成仓库
我有一个名为MyLisp的仓库,里面存放的是一些我自己写的elisp脚本,仓库地址是~/MyLisp. 

其中我使用elisp模仿rake写了一个新的构建工具名为elake,存放在~/MyLisp/elake目录中. 某一天我想把elake独立出来作为一个仓库来使用,则有两种方法可以实现:
*** 使用git filter-branch
1. clone一个新的MyLisp仓库到~/elake
   #+BEGIN_SRC sh
     git clone ~/MyLisp ~/elake
   #+END_SRC
2. 通常刚clone出来的~/elake仓库本地只会有一个master分支，如果我们希望保存其他的分支，那就首先把它们创建出来：
   #+BEGIN_SRC sh
     cd ~/elake
     git branch -r br1 origin/br1
     git branch -r br2 origin/br2
   #+END_SRC
3. 删掉无用的origin
   #+BEGIN_SRC emacs-lisp
     git remote rm origin
   #+END_SRC
4. 过滤所有历史提交，只保留对elake子目录有影响的提交，并且把子目录设为该仓库的根目录
   #+BEGIN_SRC emacs-lisp
     git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter elake -- --all
   #+END_SRC

   其中各参数的意义如下:
   + --tag-name-filter cat  :: 该参数控制我们要如何保存旧的tag，参数值为bash命令，cat表示原样输出。所以，如果你不关心tag，就不需要这个参数了；
   + --prune-empty :: 删除空的（对子目录没有影响的）的提交
   + --subdirectory-filter elake :: 指定子模块路径
   + --all :: 该参数必须跟在--后面，表示对所有分支做操作，即对上一步创建的所有本地分支做操作。所以，如果你只想保存当前分支，就不需要这个参数了
              
   该命令执行完毕后，查看当前目录结构就会发现里面已经是子目录的内容了。git log查看提交历史已经正常保存了
5. 至此，主要工作已经完成。但是当前的仓库中还保存这一下不需要的object，如果想清理这些来减小当前仓库的体积
   #+BEGIN_SRC sh
     git reset --hard
     git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
     git reflog expire --expire=now --all
     git gc --aggressive --prune=now
   #+END_SRC
*** 使用git tree
git 1.7.11之后使用 git subtree 指令可以很簡單地把單一資料夾相關的 commit 都抽出來

1. 将MyLisp仓库中关于elake的提交信息抽出为新的branch
   #+BEGIN_SRC sh
     cd ~/MyLisp
     git subtree split -P elake -b elake
   #+END_SRC
2. 新建elake仓库,并从MyLisp的elake branch中拉内容
   #+BEGIN_SRC sh
     cd ~/
     mkdir elake
     git init
     git pull ~/MyLisp elake
   #+END_SRC
** 如何让git忽略文件权限的变更
git中可以加入忽略文件权限的配置,具体如下
#+BEGIN_SRC sh
  git config core.filemode false
#+END_SRC

但若设置该属性之前,权限就混乱了的话,是无法自动修复的.
** 如何快速架设gitlab
https://bitnami.com/stack/gitlab/virtual-machine 中可以下载虚拟机，里面包含已经架设好了的gitlab
** 解决Detached HEAD问题
要删除或合并这个无名分支，都需要用branch为其起个名字。
#+BEGIN_SRC sh
  git branch ${新分支名}
#+END_SRC

然后就能用 =branch -D= 或 =merge= 来处理这个分支了
** 执行玩rebase之后要反悔怎么办?
执行完rebase之后，若要反悔，可以使用git reset指令，但是它需要先找到执行rebase之前HEAD所在的最新的commit节点

方法是使用relog指令来找
#+BEGIN_SRC sh
  git relog ${HEAD或其他分支名}
#+END_SRC
** 设置diff tool
#+BEGIN_SRC sh
  git config --global diff.tool kdiff3
  git config --global difftool.kdiff3.cmd "kdiff3 \"$LOCAL\" \"$REMOTE\""
  git config --global difftool.prompt false
#+END_SRC
** 设置Merge Tool解决合并分支时发生的冲突
#+BEGIN_SRC sh
  git config --global merge.tool kdiff3
  git config --global mergetool.kdiff3.cmd "kdiff3 \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"MERGED\""
  git config --global mergetool.prompt false # Git启动外部程序之前不询问
  git config --global mergetool.kdiff3.trustExitCode true # Git直接使用外部程序返回值来判断合并是否成功
  git config --global mergetool.keepBackup false          # 是否由Git来备份原冲突文件
#+END_SRC
** 使用Git Daemon创建Git Server
Git Daemon不需要其他程序，只要一般的Git指令就能启动，但缺点是没有授权的管理和控制机制

Git Daemon使用抓闷的git通讯协议(默认9418端口)。其设置步骤如下：

假设在 =GitRemoteRepo= 目录中有 =Repo1=, =Repo2=, =Repo3= 等仓库,那么:

1. 在 =GitRemoteRepo= 目录下运行 =git daemon --exort-all= 会开发当前文件夹下的所有Git仓库

2. 网络其他机器可以通过 =git clone git://远程机器/GitRemoteRepo/Repo1= 来获取远程仓库

3. 如果希望独立控制开发能够哪个Repo,则不要使用 =--export-all= 选项,而是在每个要开放的repo的 =.git= 子文件夹中创建名为 =git-daemon-export-ok= 的空文件.

   如果是bare类型的Git仓库,只需要把 =git-daemon-export-ok= 文件放在第一层目录中就行了.

4. Git Daemon默认只能读取不能被push,要开放写入功能需要加 ~--enable=recv-pack~ 选项
   #+BEGIN_SRC sh
     git daemon --export-all --enable=receive-pack
   #+END_SRC

5. 还有一些常用的选项

   + --base-path=文件夹路径

     简化客户端上读取仓库时的路径,可以使用相对与base-path的路径来代替绝对路径了

   + --port=通讯端口

     指定传输数据的通讯端口.

     客户端连接时,也需要指定相同的通讯端口
     #+BEGIN_SRC sh
       git clone git://远程地址:端口/repo路径
     #+END_SRC

   + --verbose

     显示完整信息
** git pull 强制更新
在使用Git的过程中，有些时候我们只想要git服务器中的最新版本的项目，对于本地的项目中修改不做任何理会，就需要用到Git pull的强制覆盖
#+BEGIN_SRC shell
  git fetch --all
  git reset --hard origin/master
  git pull
#+END_SRC
     
